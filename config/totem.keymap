//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#define ZMK_POINTING_DEFAULT_MOVE_VAL 1800  // default: 600

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

&sk { quick-release; };

&lt {
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;
    require-prior-idle-ms = <150>;
    flavor = "balanced";
};

&mmv { time-to-max-speed-ms = <600>; };

/ {
    combos { compatible = "zmk,combos"; };

    behaviors {
        hml: home_row_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HRMs for left hand";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <32 33 34 5 6 7 8 9 15 16 17 18 19 26 27 28 29 30 31 35 36 37>;
            hold-trigger-on-release;
        };

        hmr: home_row_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HRMs for right hand";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <35 36 37 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 25 32 33 34>;
        };

        mk_lt: magic_key_layer_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "Layer tap behavior for magic key";
            bindings = <&mo>, <&sk>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
        };

        mk_mm: magic_key_mod_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "Mod morph behavior for magic key";
            bindings = <&mk_lt 1 LSHFT>, <&mk_cw_mt LSHFT 0>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mk_cw_mt: magic_key_caps_word_mod_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "Allows tap and holding magic key for shift";
            bindings = <&kp>, <&caps_word>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            flavor = "balanced";
        };
    };

    macros {
        test_macro: test_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp T &kp E &kp S &kp T &kp SPACE &kp M &kp A &kp C &kp R &kp O>;
            label = "TEST_MACRO";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            bindings = <
       &kp B        &kp L        &kp D          &kp W         &kp Z        &kp J   &kp F         &kp O         &kp U        &kp COMMA
       &hml LGUI N  &hml LALT R  &hml LSHIFT T  &hml LCTRL S  &kp G        &kp Y   &hmr LCTRL H  &hmr LSHFT A  &hmr LALT E  &hmr LEFT_GUI I
&kp Z  &kp X        &kp Q        &kp M          &kp C         &kp V        &kp K   &kp P         &kp SQT       &key_repeat  &kp PERIOD       &kp FSLH
                                 &lt 6 ESC      &lt 4 SPACE   &lt 2 RET    &mk_mm  &lt 3 BSPC    &lt 5 TAB
            >;

            label = "BASE";
        };

        sym_layer {
            bindings = <
        &trans  &trans  &trans    &trans    &trans    &trans  &trans     &trans     &trans    &trans
        &trans  &trans  &kp LPAR  &kp RPAR  &trans    &trans  &kp LCTRL  &kp LSHFT  &kp LALT  &kp LGUI
&trans  &trans  &trans  &trans    &trans    &trans    &trans  &trans     &trans     &trans    &trans    &trans
                        &trans    &trans    &trans    &trans  &trans     &trans
            >;

            label = "SYM";
        };

        num_layer {
            bindings = <
        &trans    &trans    &trans     &trans     &trans    &trans  &kp N7  &kp N8  &kp N9  &trans
        &kp LGUI  &kp LALT  &kp LSHFT  &kp LCTRL  &trans    &trans  &kp N4  &kp N5  &kp N6  &trans
&trans  &trans    &trans    &trans     &trans     &trans    &kp N0  &kp N1  &kp N2  &kp N3  &trans  &trans
                            &trans     &trans     &trans    &trans  &trans  &trans
            >;

            label = "NUM";
        };

        nav_layer {
            bindings = <
        &trans  &trans    &kp UP    &trans     &trans    &trans  &trans     &trans     &trans    &trans
        &trans  &kp LEFT  &kp DOWN  &kp RIGHT  &trans    &trans  &kp LCTRL  &kp LSHFT  &kp LALT  &kp LGUI
&trans  &trans  &trans    &trans    &trans     &trans    &trans  &trans     &trans     &trans    &trans    &trans
                          &trans    &trans     &trans    &trans  &trans     &trans
            >;

            label = "NAV";
        };

        mouse_layer {
            bindings = <
        &trans    &trans     &trans     &trans     &trans      &msc SCRL_LEFT  &msc SCRL_UP    &mmv MOVE_UP    &msc SCRL_DOWN   &msc SCRL_RIGHT
        &kp LGUI  &kp LALT   &kp LSHFT  &kp LCTRL  &trans      &trans          &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &trans
&trans  &mkp MB4  &mkp RCLK  &mkp MCLK  &mkp LCLK  &mkp MB5    &trans          &trans          &trans          &trans           &trans           &trans
                             &trans     &trans     &trans      &trans          &trans          &trans
            >;

            label = "MOUSE";
        };

        tool_layer {
            bindings = <
        &trans                &trans                &trans        &trans        &trans           &trans  &trans     &trans     &trans    &trans
        &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &kp C_VOL_DN  &kp C_VOL_UP  &kp C_MUTE       &trans  &kp LCTRL  &kp LSHFT  &kp LALT  &kp LGUI
&trans  &kp LC(Z)             &kp LC(X)             &kp LC(C)     &kp LC(V)     &kp LS(LC(Z))    &trans  &trans     &trans     &trans    &trans    &trans
                                                    &trans        &trans        &trans           &trans  &trans     &trans
            >;

            label = "TOOL";
        };

        system_layer {
            bindings = <
        &trans    &trans    &bootloader  &sys_reset  &trans    &trans  &sys_reset  &bootloader  &out OUT_BLE  &out OUT_USB
        &kp LGUI  &kp LALT  &kp LSHFT    &kp LCTRL   &trans    &trans  &bt BT_PRV  &bt BT_NXT   &bt BT_CLR    &bt BT_CLR_ALL
&trans  &trans    &trans    &trans       &trans      &trans    &trans  &trans      &trans       &trans        &trans          &trans
                            &trans       &trans      &trans    &trans  &trans      &trans
            >;

            label = "SYSTEM";
        };

        function_layer {
            bindings = <
        &trans  &trans  &trans  &trans       &trans    &trans  &kp F7  &kp F8  &kp F9  &kp F10
        &trans  &trans  &trans  &test_macro  &trans    &trans  &kp F4  &kp F5  &kp F6  &kp F11
&trans  &trans  &trans  &trans  &trans       &trans    &trans  &kp F1  &kp F2  &kp F3  &kp F12  &trans
                        &trans  &trans       &trans    &trans  &trans  &trans
            >;

            label = "FUN";
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <3 4>;
            then-layer = <7>;
        };
    };
};
